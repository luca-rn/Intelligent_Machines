# -*- coding: utf-8 -*-
"""YoloCardVision

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kXiExg-PgTNrX2bQFMzf39OX2U8eOLN6
"""

from google.colab import drive
drive.mount('/content/drive')

zip_path = '/content/drive/MyDrive/data-yolo.zip'

import shutil
import os
import zipfile

# extract zip file
download_folder = "/content"
zip_name = "data-yolo.zip"
os.makedirs(download_folder, exist_ok=True)

with zipfile.ZipFile(zip_path, "r") as zip_ref:
    zip_ref.extractall(download_folder)

print(f"Extraction complete! Files saved to {download_folder}")

!ls /content

import os
import shutil

path_to_folder_delete = '/content/runs/detect/predict2'

# remove an empty directory
shutil.rmtree(path_to_folder_delete)      # throws OSError if not empty

import os
import shutil
import random

# Paths
dataset_path = download_folder
image_dir = os.path.join(dataset_path, "images")
label_dir = os.path.join(dataset_path, "labels")

# Output paths
train_img = os.path.join(dataset_path, "images/train")
val_img = os.path.join(dataset_path, "images/val")
train_lbl = os.path.join(dataset_path, "labels/train")
val_lbl = os.path.join(dataset_path, "labels/val")

# Create train/val folders
for d in [train_img, val_img, train_lbl, val_lbl]:
    os.makedirs(d, exist_ok=True)

# List images and shuffle
images = sorted([f for f in os.listdir(image_dir) if f.endswith(".jpg")])  # Adjust for other image formats
random.shuffle(images)

# Split 80% train, 20% val
split_idx = int(0.8 * len(images))
train_files, val_files = images[:split_idx], images[split_idx:]

# Move files
for file_list, img_dest, lbl_dest in [(train_files, train_img, train_lbl), (val_files, val_img, val_lbl)]:
    for file in file_list:
        shutil.move(os.path.join(image_dir, file), os.path.join(img_dest, file))
        label_file = file.replace(".jpg", ".txt")  # Assuming YOLO format
        if os.path.exists(os.path.join(label_dir, label_file)):
            shutil.move(os.path.join(label_dir, label_file), os.path.join(lbl_dest, label_file))

print("Dataset successfully split into training and validation sets!")

!ls /content/images
!ls /content/labels

# Read class names from classes.txt
classes_txt_path = os.path.join(dataset_path, "classes.txt")
with open(classes_txt_path, "r") as f:
    class_names = [line.strip() for line in f.readlines()]

# Generate dataset.yaml
dataset_yaml_path = os.path.join(dataset_path, "dataset.yaml")
with open(dataset_yaml_path, "w") as f:
    f.write(f"train: {os.path.join(dataset_path, 'images/train')}\n")
    f.write(f"val: {os.path.join(dataset_path, 'images/val')}\n")
    f.write(f"nc: {len(class_names)}\n")
    f.write(f"names: {class_names}\n")

print('\nFile contents:\n')
!cat /content/dataset.yaml

!pip install ultralytics

import time
from ultralytics import YOLO

model = YOLO("yolo11n.pt")
#model.train(data=dataset_yaml_path, epochs=100, imgsz=640)

model.train(
    data=dataset_yaml_path,
    epochs=100,
    imgsz=640,
    save_period=10
)

# Load the trained model
#model = YOLO("runs/detect/train/weights/best.pt")
#model = YOLO("runs/detect/train/weights/epoch20.pt")
#model = YOLO("runs/detect/train/weights/epoch70.pt")
#model = YOLO("runs/detect/train/weights/epoch90.pt")
#model = YOLO("runs/detect/train/weights/last.pt")

# Run prediction on the validation images and save the results
results = model.predict(source="/content/images/val", save=True)

import pandas as pd
import matplotlib.pyplot as plt

# 1) Locate your run folder, e.g. runs/train/exp
csv_path = "runs/detect/train/results.csv"
df = pd.read_csv(csv_path)

# 2) Plot total loss per epoch
#    (Ultralytics logs `metrics/xy_loss` + `/obj_loss` + `/cls_loss` = metrics/loss)
plt.plot(df['epoch'], df['train/box_loss'], marker='o')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss per Epoch')
plt.grid(True)
plt.show()

import glob
from IPython.display import Image, display
for image_path in glob.glob(f'runs/detect/predict/*.jpg')[:10]:
  display(Image(filename=image_path, height=400))
  print('\n')